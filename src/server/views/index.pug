html
  head
    title view
    style.
      html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
      }
      body {
        background: white;
        display: -webkit-flex;
        -webkit-justify-content: center;
        -webkit-align-items: center;
        -webkit-flex-direction: column;
      }
      video {
        display: block;
        max-width: 100%;
        background: rgba(0, 0, 0, 0.25);
      }
  body
    video#remoteVideo(autoplay, controls)
    script.
      var serverConnection;
      var remoted = false;
      var peerConnection;
      var uuid;
      const offerOptions = {
        offerToReceiveAudio: 1,
        offerToReceiveVideo: 1
      };
      var peerConnectionConfig = {
        'iceServers': [
          { 'urls': 'stun:stun.services.mozilla.com' },
          { 'urls': 'stun:stun.l.google.com:19302' },
          { 'urls': 'stun:stun1.l.google.com:19302' },
          { 'urls': 'stun:stun2.l.google.com:19302' },
          { 'urls': 'stun:stun3.l.google.com:19302' },
          { 'urls': 'stun:stun4.l.google.com:19302' },
          { 'urls': 'stun:stunserver.org' }
        ]
      };

      pageReady();

      window.onbeforeunload = function() {
        if (peerConnection) peerConnection.close();
        if (serverConnection) serverConnection.close();
      }

      function pageReady() {
        uuid = uuid();
        remoteVideo = document.getElementById('remoteVideo');

        serverConnection = new WebSocket('wss://' + window.location.host);
        serverConnection.onmessage = gotMessageFromServer;
      }

      function start() {
        peerConnection = new RTCPeerConnection(peerConnectionConfig);
        peerConnection.onicecandidate = gotIceCandidate;
        peerConnection.onaddstream = gotRemoteStream;
      }

      function gotMessageFromServer(message) {
        console.log('message', message)
        if(!peerConnection) start();

        var signal = JSON.parse(message.data);

        // Ignore messages from ourself
        if(signal.uuid == uuid) return;

        if(signal.sdp && !remoted) {
          remoted = true;
          peerConnection.setRemoteDescription(signal.sdp).then(function() {
            // Only create answers in response to offers
            if(signal.sdp.type == 'offer') {
              console.log('offer')
              peerConnection.createAnswer(offerOptions).then(createdDescription).catch(errorHandler);
            }
          }).catch((err) => {
            errorHandler(err)
          })//.catch(errorHandler);
        } else if(signal.ice) {
          peerConnection.addIceCandidate(new RTCIceCandidate(signal.ice)).catch(errorHandler);
        }
      }

      function gotIceCandidate(event) {
        console.log('ice')
        if(event.candidate != null) {
          console.log('candidate')
          serverConnection.send(JSON.stringify({'ice': event.candidate, 'uuid': uuid}));
        }
      }

      function createdDescription(description) {
        console.log('got description');

        peerConnection.setLocalDescription(description).then(function() {
          peerConnection.localDescription.sdp = setMediaBitrates(peerConnection.localDescription.sdp);
          serverConnection.send(JSON.stringify({'sdp': peerConnection.localDescription, 'uuid': uuid}));
        }).catch(errorHandler);
      }

      function gotRemoteStream(event) {
        console.log('got remote stream');
        remoteVideo.src = window.URL.createObjectURL(event.stream);
      }

      function errorHandler(error) {
        console.log('error', error);
      }

      // Taken from http://stackoverflow.com/a/105074/515584
      // Strictly speaking, it's not a real UUID, but it gets the job done here
      function uuid() {
        function s4() {
          return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
        }

        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
      }

      function setMediaBitrates(sdp) {
        return setMediaBitrate(setMediaBitrate(sdp, "video", 500), "audio", 50);
      }

      function setMediaBitrate(sdp, media, bitrate) {
        var lines = sdp.split("\n");
        var line = -1;
        for (var i = 0; i < lines.length; i++) {
          if (lines[i].indexOf("m=" + media) === 0) {
            line = i;
            break;
          }
        }
        if (line === -1) {
          console.debug("Could not find the m line for", media);
          return sdp;
        }
        console.debug("Found the m line for", media, "at line", line);

        // Pass the m line
        line++;

        // Skip i and c lines
        while (lines[line].indexOf("i=") === 0 || lines[line].indexOf("c=") === 0) {
          line++;
        }

        // If we're on a b line, replace it
        if (lines[line].indexOf("b") === 0) {
          console.debug("Replaced b line at line", line);
          lines[line] = "b=AS:" + bitrate;
          return lines.join("\n");
        }

        // Add a new b line
        console.debug("Adding new b line before line", line);
        var newLines = lines.slice(0, line)
        newLines.push("b=AS:" + bitrate)
        newLines = newLines.concat(lines.slice(line, lines.length))
        return newLines.join("\n")
      }