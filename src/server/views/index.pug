html
  head
    title view
  body
    video#remoteVideo(autoplay)
    script.
      var serverConnection;
      var peerConnection;
      var uuid;

      var peerConnectionConfig = {
        'iceServers': [
          {'urls': 'stun:stun.services.mozilla.com'},
          {'urls': 'stun:stun.l.google.com:19302'},
        ]
      };

      pageReady();

      function pageReady() {
        uuid = uuid();
        remoteVideo = document.getElementById('remoteVideo');

        serverConnection = new WebSocket('wss://localhost:8443');
        serverConnection.onmessage = gotMessageFromServer;
      }

      function start() {
        peerConnection = new RTCPeerConnection(peerConnectionConfig);
        peerConnection.onicecandidate = gotIceCandidate;
        peerConnection.onaddstream = gotRemoteStream;
        peerConnection.createOffer().then(createdDescription).catch(errorHandler);
      }

      function gotMessageFromServer(message) {
        console.log('message', message)
        if(!peerConnection) start();

        var signal = JSON.parse(message.data);

        // Ignore messages from ourself
        if(signal.uuid == uuid) return;

        if(signal.sdp) {
          peerConnection.setRemoteDescription(new RTCSessionDescription(signal.sdp)).then(function() {
            // Only create answers in response to offers
            if(signal.sdp.type == 'offer') {
              console.log('offer')
              peerConnection.createAnswer().then(createdDescription).catch(errorHandler);
            }
          }).catch(errorHandler);
        } else if(signal.ice) {
          peerConnection.addIceCandidate(new RTCIceCandidate(signal.ice)).catch(errorHandler);
        }
      }

      function gotIceCandidate(event) {
        console.log('ice')
        if(event.candidate != null) {
          console.log('candidate')
          serverConnection.send(JSON.stringify({'ice': event.candidate, 'uuid': uuid}));
        }
      }

      function createdDescription(description) {
        console.log('got description');

        peerConnection.setLocalDescription(description).then(function() {
          serverConnection.send(JSON.stringify({'sdp': peerConnection.localDescription, 'uuid': uuid}));
        }).catch(errorHandler);
      }

      function gotRemoteStream(event) {
        console.log('got remote stream');
        remoteVideo.src = window.URL.createObjectURL(event.stream);
      }

      function errorHandler(error) {
        console.log('error', error);
      }

      // Taken from http://stackoverflow.com/a/105074/515584
      // Strictly speaking, it's not a real UUID, but it gets the job done here
      function uuid() {
        function s4() {
          return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
        }

        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
      }